name: Team Flow Frontend Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE_TAG: ${{ github.sha }}
  AWS_ECR_REPOSITORY_URI: ${{ vars.AWS_ECR_REGISTRY}}/${{ vars.IMAGE_NAME }}

jobs:
  quality-checks:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run linter
        run: bun run lint

      - name: Run type checking
        run: bunx tsc --noEmit

      - name: Run tests (if available)
        run: bun test || echo "No tests configured"

      - name: Build application
        run: bun run build

  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: Build and tag docker image to Amazon ECR
        run: docker build -t $AWS_ECR_REPOSITORY_URI:latest -t $AWS_ECR_REPOSITORY_URI:$IMAGE_TAG .

      - name: Push docker images to Amazon ECR
        run: |
          docker push $AWS_ECR_REPOSITORY_URI:latest
          docker push $AWS_ECR_REPOSITORY_URI:$IMAGE_TAG

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: ssh into server and use new image
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ vars.PROJECT_PATH }}
            aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.AWS_ECR_REGISTRY }}
            docker pull ${{ vars.AWS_ECR_REGISTRY}}/${{ vars.IMAGE_NAME }}:latest
            docker compose down
            docker compose up -d
            docker restart nginx